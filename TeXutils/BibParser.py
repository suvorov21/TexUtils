#!/usr/bin/env python

import click
from termcolor import colored as col

class BibParser:
    def __init__(self, file_in="", file_out="", skip=0):
        self.file_in    = file_in
        self.file_out   = file_out
        self.skip       = skip

    # simple bracket parser
    def bracket_parser(self, line):
        ls = []
        if '=' in line:
            for ch in line:
                if ch in ["(", "{"]:
                    ls.append(ch)
                    continue
                if ch == "$":
                    if len(ls) > 0:
                        if ls[-1] == "$":
                            ls.pop()
                            continue
                    ls.append(ch)

                if ch in [")", "}"]:
                    if len(ls) > 0:
                        if (ch == ")" and ls[-1] == "(") or \
                        (ch == "}" and ls[-1] == "{"):
                            ls.pop()
                            continue

                        print("error 1 in line ", line)
                        return False

                    print("error 2 in line ", line)
                    return False
            if len(ls) > 0:
                print("error 3 in line ", line)
                return False
        return True


    def do_parse(self):
        print("Parsing BiBTeX.........", end='')
        fo = open(self.file_out, 'w')

        with open(self.file_in) as f:
            # ommit first head lines generated by Mendeley
            # related to Mac OS client only
            for i in range(self.skip):
                f.readline()

            # add few rules
            for line in f:
                # ommit abstract
                if 'abstract = ' in line or 'file = ' in line \
                        or 'keywords = ' in line:
                    continue
                # add month w/o brackets
                if 'month = ' in line:
                    line = line.replace("{", "")
                    line = line.replace("}", "")

                if 'author = ' in line:
                    authors = line.split('author =')[1]
                    authors = authors.replace('{', '')
                    authors = authors.replace('}', '')
                    authors = authors.split('and')
                    if len(authors) > 1:
                        line = 'author = {' + authors[0] + ' et al},\n'

                # remove unicode artefacts
                line = line.replace("→", "$\\to$")
                line = line.replace("µ", "$\\mu$")
                line = line.replace("π", "$\\pi$")
                line = line.replace("Ɵ", "$\\theta$")
                line = line.replace("×", "$\\times$")
                line = line.replace("×1021", "$\\times10^{21}$")
                line = line.replace("\\nu$¯$\\mu", "\\bar\\nu_\\mu")

                # reverse Mendeley 'TeX adaptation'
                line = line.replace(r"{\$}", "$")
                line = line.replace(r"\backslash", "\\")
                line = line.replace(r"{\{}", "{")
                line = line.replace(r"{\}}", "}")
                line = line.replace(r"{\^{}}", "^")
                line = line.replace(r"{\_}", "_")
                line = line.replace(r"{\#}", "#")
                line = line.replace(r"{\%}", "%")
                line = line.replace(r"{\&}", "&")

                if not self.bracket_parser(line):
                    print(f'[{col("FAIL", color="red")}]')
                    print('Error while handling', line)
                    return False

                fo.write(line)

        fo.close()
        print(f'[{col("OK", color="green")}]')
        return True


@click.command()
@click.argument('input_file')
@click.argument('output_file')
@click.option('--skip', '-s', default=0,
              help='number of lines to skip from the top of the file')
def main(input_file, output_file, skip):
    parser = BibParser(input_file, output_file, skip)
    parser.do_parse()

if __name__ == '__main__':
    main()
